// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.js");

function andMap(wrappedValue, wrappedFunction) {
  var exit = 0;
  if (typeof wrappedFunction === "number") {
    exit = 1;
  } else if (wrappedFunction.tag) {
    if (typeof wrappedValue === "number") {
      if (wrappedValue) {
        exit = 1;
      } else {
        return /* NotAsked */0;
      }
    } else if (wrappedValue.tag) {
      return /* Success */Block.__(1, [Curry._1(wrappedFunction[0], wrappedValue[0])]);
    } else {
      exit = 1;
    }
  } else {
    return /* Failure */Block.__(0, [wrappedFunction[0]]);
  }
  if (exit === 1) {
    if (typeof wrappedValue === "number") {
      if (wrappedValue === 0 && wrappedFunction === 0) {
        return /* NotAsked */0;
      } else {
        return /* Loading */1;
      }
    } else if (wrappedValue.tag) {
      if (wrappedFunction !== 0) {
        return /* Loading */1;
      } else {
        return /* NotAsked */0;
      }
    } else {
      return /* Failure */Block.__(0, [wrappedValue[0]]);
    }
  }
  
}

function map(f, data) {
  if (typeof data === "number") {
    if (data) {
      return /* Loading */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (data.tag) {
    return /* Success */Block.__(1, [Curry._1(f, data[0])]);
  } else {
    return /* Failure */Block.__(0, [data[0]]);
  }
}

function map2(f, a, b) {
  return andMap(b, map(f, a));
}

function map3(f, a, b, c) {
  return andMap(c, andMap(b, map(f, a)));
}

function mapError(f, data) {
  if (typeof data === "number") {
    if (data) {
      return /* Loading */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (data.tag) {
    return /* Success */Block.__(1, [data[0]]);
  } else {
    return /* Failure */Block.__(0, [Curry._1(f, data[0])]);
  }
}

function mapBoth(successFn, errorFn) {
  return (function (param) {
      return Utils.$at$bang((function (param) {
                    return mapError(errorFn, param);
                  }), (function (param) {
                    return map(successFn, param);
                  }), param);
    });
}

function andThen(f, data) {
  if (typeof data === "number") {
    if (data) {
      return /* Loading */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (data.tag) {
    return Curry._1(f, data[0]);
  } else {
    return /* Failure */Block.__(0, [data[0]]);
  }
}

function withDefault($$default, data) {
  if (typeof data === "number" || data.tag !== 1) {
    return $$default;
  } else {
    return data[0];
  }
}

function fromResult(result) {
  if (result.tag) {
    return /* Failure */Block.__(0, [result[0]]);
  } else {
    return /* Success */Block.__(1, [result[0]]);
  }
}

function toOption(data) {
  if (typeof data === "number" || data.tag !== 1) {
    return /* None */0;
  } else {
    return /* Some */[data[0]];
  }
}

function append(a, b) {
  return andMap(b, map((function (a, b) {
                    return /* tuple */[
                            a,
                            b
                          ];
                  }), a));
}

function succeed(a) {
  return /* Success */Block.__(1, [a]);
}

function isSuccess(data) {
  if (typeof data === "number" || data.tag !== 1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function isFailure(data) {
  if (typeof data === "number" || data.tag) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function isLoading(data) {
  if (typeof data === "number" && data !== 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isNotAsked(data) {
  if (typeof data === "number" && data === 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

exports.andMap      = andMap;
exports.map         = map;
exports.map2        = map2;
exports.map3        = map3;
exports.mapError    = mapError;
exports.mapBoth     = mapBoth;
exports.andThen     = andThen;
exports.withDefault = withDefault;
exports.fromResult  = fromResult;
exports.toOption    = toOption;
exports.append      = append;
exports.succeed     = succeed;
exports.isSuccess   = isSuccess;
exports.isFailure   = isFailure;
exports.isLoading   = isLoading;
exports.isNotAsked  = isNotAsked;
/* No side effect */
